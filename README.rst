ledger
======

.. image:: https://www.r-pkg.org/badges/version/ledger
    :target: https://cran.r-project.org/package=ledger
    :alt: CRAN Status Badge

.. image:: https://travis-ci.org/trevorld/r-ledger.png?branch=master
    :target: https://travis-ci.org/trevorld/r-ledger
    :alt: Travis-CI Build Status

.. image:: https://ci.appveyor.com/api/projects/status/github/trevorld/r-ledger?branch=master&svg=true
    :target: https://ci.appveyor.com/project/trevorld/r-ledger
    :alt: AppVeyor Build Status

.. image:: https://img.shields.io/codecov/c/github/trevorld/r-ledger/master.svg
    :target: https://codecov.io/github/trevorld/r-ledger?branch=master
    :alt: Coverage Status

.. image:: https://cranlogs.r-pkg.org/badges/ledger
    :target: https://cran.r-project.org/package=ledger
    :alt: RStudio CRAN mirror downloads

.. image:: http://www.repostatus.org/badges/latest/active.svg
   :alt: Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed.
   :target: http://www.repostatus.org/#active

``ledger`` is an R package to import data from `plain text accounting <https://plaintextaccounting.org/>`_ software like `Ledger <https://www.ledger-cli.org/>`_, `HLedger <http://hledger.org/>`_, and `Beancount <http://furius.ca/beancount/>`_ into an R data frame for convenient analysis, plotting, and export.

Right now it supports reading in the register from ``ledger``, ``hledger``, and ``beancount`` files.  

.. contents::

Installation
------------

To install the last version released to CRAN use the following command::

    > install.packages("ledger")

To install the development version of the ``ledger`` package (and its R package dependencies) use the ``install_github`` function from the ``remotes`` package in R::
    
    > remotes::install_github("trevorld/r-ledger")

This package also has some system dependencies that need to be installed depending on which plaintext accounting files you wish to read to be able to read in:

ledger
    * `ledger <https://www.ledger-cli.org/>`_ (>= 3.1) OR for a subset of files hledger (>= 1.4)

hledger
    * `hledger <http://hledger.org/>`_ (>= 1.4) OR for a subset of files ledger (>= 3.1)

beancount
    * `beancount <http://furius.ca/beancount/>`_ (>= 2.0)
    * `hledger <http://hledger.org/>`_ (>= 1.4) OR for a subset of files ledger (>= 3.1)

To install hledger and beancount run::

    $ stack install --resolver=lts hledger-lib-1.9 hledger-1.9
    $ pip3 install beancount

`Several pre-compiled Ledger binaries are available <https://www.ledger-cli.org/download.html>`_ (often found in several open source repos).

To run the unit tests you'll also need the suggested R package ``testthat``.

Examples
--------

API
+++

The main function of this package is ``register`` which reads in the register of a plaintext accounting file.  This package also exports S3 methods so one can use ``rio::import`` to read in a register, a ``net_worth`` convenience function, and a ``prune_coa`` convenience function.

register
~~~~~~~~

Here is an example reading in the example beancount file generated by ``bean-example``::

    > library("ledger")
    > example_beancount_file <- tempfile(fileext = ".beancount")
    > system(paste("bean-example -o", example_beancount_file), ignore.stderr=TRUE)
    > df <- register(example_beancount_file)
    > options(width=180)
    > print(df)
    # A tibble: 3,683 x 11
       date       mark  payee                description                          account                        amount commodity historical_cost hc_commodity market_value mv_commodity
       <date>     <chr> <chr>                <chr>                                <chr>                           <dbl> <chr>               <dbl> <chr>               <dbl> <chr>       
     1 2016-01-01 *     NA                   Opening Balance for checking account Assets:US:BofA:Checking        4300.  USD                4300.  USD                4300.  USD         
     2 2016-01-01 *     NA                   Opening Balance for checking account Equity:Opening-Balances       -4300.  USD               -4300.  USD               -4300.  USD         
     3 2016-01-01 *     NA                   Allowed contributions for one year   Income:US:Federal:PreTax401k -18000   IRAUSD           -18000   IRAUSD           -18000   IRAUSD      
     4 2016-01-01 *     NA                   Allowed contributions for one year   Assets:US:Federal:PreTax401k  18000   IRAUSD            18000   IRAUSD            18000   IRAUSD      
     5 2016-01-03 *     RiverBank Properties Paying the rent                      Assets:US:BofA:Checking       -2400   USD               -2400   USD               -2400   USD         
     6 2016-01-03 *     RiverBank Properties Paying the rent                      Expenses:Home:Rent             2400   USD                2400   USD                2400   USD         
     7 2016-01-04 *     BANK FEES            Monthly bank fee                     Assets:US:BofA:Checking          -4   USD                  -4   USD                  -4   USD         
     8 2016-01-04 *     BANK FEES            Monthly bank fee                     Expenses:Financial:Fees           4   USD                   4   USD                   4   USD         
     9 2016-01-05 *     China Garden         Eating out alone                     Liabilities:US:Chase:Slate      -17.9 USD                 -17.9 USD                 -17.9 USD         
    10 2016-01-05 *     China Garden         Eating out alone                     Expenses:Food:Restaurant         17.9 USD                  17.9 USD                  17.9 USD         
    # ... with 3,673 more rows


Here is an example of using the ``flags`` argument (in this case passed to ``hledger register``) to filter on any of the tags starting with ``#trip`` in the example beancount file::

    > df <- register(example_beancount_file, flags="tag:Tag=#trip")
    > print(df)
    # A tibble: 178 x 11
       date       mark  payee description account                    amount commodity historical_cost hc_commodity market_value mv_commodity
       <date>     <chr> <lgl> <chr>       <chr>                       <dbl> <chr>               <dbl> <chr>               <dbl> <chr>       
     1 2016-07-15 *     NA    NA          Liabilities:US:Chase:Slate -37.7  USD                -37.7  USD                -37.7  USD         
     2 2016-07-15 *     NA    NA          Expenses:Food:Restaurant    37.7  USD                 37.7  USD                 37.7  USD         
     3 2016-07-16 *     NA    NA          Liabilities:US:Chase:Slate -49.5  USD                -49.5  USD                -49.5  USD         
     4 2016-07-16 *     NA    NA          Expenses:Food:Restaurant    49.5  USD                 49.5  USD                 49.5  USD         
     5 2016-07-16 *     NA    NA          Liabilities:US:Chase:Slate -27.8  USD                -27.8  USD                -27.8  USD         
     6 2016-07-16 *     NA    NA          Expenses:Food:Restaurant    27.8  USD                 27.8  USD                 27.8  USD         
     7 2016-07-16 *     NA    NA          Liabilities:US:Chase:Slate  -6.18 USD                 -6.18 USD                 -6.18 USD         
     8 2016-07-16 *     NA    NA          Expenses:Food:Coffee         6.18 USD                  6.18 USD                  6.18 USD         
     9 2016-07-17 *     NA    NA          Liabilities:US:Chase:Slate -32.9  USD                -32.9  USD                -32.9  USD         
    10 2016-07-17 *     NA    NA          Expenses:Food:Restaurant    32.9  USD                 32.9  USD                 32.9  USD         
    > suppressPackageStartupMessages(library("dplyr"))
    > dplyr::filter(df, grepl("Expenses", account)) %>% group_by(account) %>% 
    + summarise(trip_total = sum(amount))
    # A tibble: 3 x 2
      account                  trip_total
      <chr>                         <dbl>
    1 Expenses:Food:Alcohol          67.5
    2 Expenses:Food:Coffee          100. 
    3 Expenses:Food:Restaurant     2177. 

**Note:** There is `currently a bug <https://bitbucket.org/blais/beancount/issues/199/bean-report-hledger-ledger-puts-link-tag>`__ in ``bean-report`` that leads us to lose the payee and description for any transactions that uses a ``#tag`` (or ``^link``) tag in a beancount file.

Using rio::import and rio::convert
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If one has loaded in the ``ledger`` package one can also use ``rio::import`` to read in the register::

    > df2 <- rio::import(example_beancount_file)
    > head(df2)
            date mark                payee                          description
    1 2016-01-01    *                 <NA> Opening Balance for checking account
    2 2016-01-01    *                 <NA> Opening Balance for checking account
    3 2016-01-01    *                 <NA>   Allowed contributions for one year
    4 2016-01-01    *                 <NA>   Allowed contributions for one year
    5 2016-01-03    * RiverBank Properties                      Paying the rent
    6 2016-01-03    * RiverBank Properties                      Paying the rent
                           account    amount commodity historical_cost hc_commodity
    1      Assets:US:BofA:Checking   3624.02       USD         3624.02          USD
    2      Equity:Opening-Balances  -3624.02       USD        -3624.02          USD
    3 Income:US:Federal:PreTax401k -18000.00    IRAUSD       -18000.00       IRAUSD
    4 Assets:US:Federal:PreTax401k  18000.00    IRAUSD        18000.00       IRAUSD
    5      Assets:US:BofA:Checking  -2400.00       USD        -2400.00          USD
    6           Expenses:Home:Rent   2400.00       USD         2400.00          USD
      market_value mv_commodity
    1      3624.02          USD
    2     -3624.02          USD
    3    -18000.00       IRAUSD
    4     18000.00       IRAUSD
    5     -2400.00          USD
    6      2400.00          USD

This allows one to use ``rio::convert`` to easily convert plaintext accounting files to other file formats such as a csv file::

    $ bean-example -o example.beancount
    $ Rscript --default-packages=ledger,rio -e 'convert("example.beancount", "example.csv")'

net_worth
~~~~~~~~~

Some examples of using the ``net_worth`` function::

    > example_ledger_file <- system.file("extdata", "example.ledger", package = "ledger") 
    > net_worth(example_ledger_file)
    # A tibble: 1 x 6
            date commodity net_worth assets liabilities revalued
          <date>     <chr>     <dbl>  <dbl>       <dbl>    <dbl>
    1 2018-06-11       USD   8125.39   7646     -520.61     1000
    > example_hledger_file <- system.file("extdata", "example.hledger", package = "ledger") 
    > net_worth(example_hledger_file, c("2016-01-01", "2017-01-01", "2018-01-01"))
    # A tibble: 3 x 5
            date commodity net_worth assets liabilities
          <date>     <chr>     <dbl>  <dbl>       <dbl>
    1 2016-01-01       USD   5000.00   5000        0.00
    2 2017-01-01       USD   4361.39   4882     -520.61
    3 2018-01-01       USD   6743.39   7264     -520.61
    > example_beancount_file <- tempfile(fileext = ".beancount")
    > system(paste("bean-example -o", example_beancount_file), ignore.stderr=TRUE)
    > ledger::net_worth(example_beancount_file)
    # A tibble: 4 x 5
            date commodity net_worth   assets liabilities
          <date>     <chr>     <dbl>    <dbl>       <dbl>
    1 2018-06-11    IRAUSD    4100.0   4100.0        0.00
    2 2018-06-11       USD  104011.7 107221.6    -3209.91
    3 2018-06-11     VACHR    -128.0   -128.0        0.00
    4 2018-06-11      <NA>       0.0      0.0        0.00
    > system(paste("bean-report", example_beancount_file, "networth"))
    Currency   Net Worth
    --------  ----------
    USD       104,011.74
    --------  ----------

**Note:** There is `currently a bug <https://github.com/simonmichael/hledger/issues/810>`__ in ``hledger register -f file.hledger -o file.csv`` where commodities are missing when the amount is zero.

prune_coa
~~~~~~~~~

Some examples using the ``prune_coa`` function to simplify the "Chart of Account" names to a given maximum depth::

    > library("dplyr")
    > example_beancount_file <- tempfile(fileext = ".beancount")
    > system(paste("bean-example -o", example_beancount_file), ignore.stderr=TRUE)
    > df <- register(example_beancount_file) %>% dplyr::filter(!is.na(commodity))
    > df %>% prune_coa() %>% group_by(account, mv_commodity) %>% summarize(market_value = sum(market_value))
    # A tibble: 11 x 3
    # Groups:   account [?]
       account     mv_commodity market_value
       <chr>       <chr>               <dbl>
     1 Assets      IRAUSD                 0 
     2 Assets      USD               121570.
     3 Assets      VACHR                 41 
     4 Equity      USD                -3749.
     5 Expenses    IRAUSD             55000 
     6 Expenses    USD               277815.
     7 Expenses    VACHR                344 
     8 Income      IRAUSD            -55000 
     9 Income      USD              -385823.
    10 Income      VACHR               -385 
    11 Liabilities USD                -2723.
    > df %>% prune_coa(2) %>% group_by(account, mv_commodity) %>% summarize(market_value = sum(market_value)) %>% print()
    # A tibble: 18 x 3
    # Groups:   account [?]
       account                     mv_commodity market_value
       <chr>                       <chr>               <dbl>
     1 Assets:US                   IRAUSD             0     
     2 Assets:US                   USD           121570.    
     3 Assets:US                   VACHR             41     
     4 Equity:Opening-Balances     USD            -3749.    
     5 Equity:Rounding             USD               -0.0495
     6 Expenses:Financial          USD              609.    
     7 Expenses:Food               USD            20069.    
     8 Expenses:Health             USD             7461.    
     9 Expenses:Home               USD            91181.    
    10 Expenses:Taxes              IRAUSD         55000     
    11 Expenses:Taxes              USD           154414.    
    12 Expenses:Transport          USD             4080     
    13 Expenses:Vacation           VACHR            344     
    14 Income:US                   IRAUSD        -55000     
    15 Income:US                   USD          -385823.    
    16 Income:US                   VACHR           -385     
    17 Liabilities:AccountsPayable USD                0     
    18 Liabilities:US              USD            -2723.
    
